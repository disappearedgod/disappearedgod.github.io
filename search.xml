<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中间件策略</title>
      <link href="/2020/07/18/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%AD%96%E7%95%A5/"/>
      <url>/2020/07/18/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>中间件策略</p><h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><ul><li><a href="http://jm.taobao.org/archives/page/46/" target="_blank" rel="noopener">淘宝中间件博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode| Array |Two Pointers| Stack|42. Trapping Rain Water</title>
      <link href="/2020/07/17/LeetCode%7C%20Array%20%7CTwo%20Pointers%7C%20Stack%7C42.%20Trapping%20Rain%20Water/"/>
      <url>/2020/07/17/LeetCode%7C%20Array%20%7CTwo%20Pointers%7C%20Stack%7C42.%20Trapping%20Rain%20Water/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem "></a><a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener">Problem </a></h1><p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p><p>![](LeetCode_Greedy_455_Assign Cookies.png)</p><p>The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!</p><p>Example:</p><blockquote><p>Input: [0,1,0,2,1,0,1,3,2,1,2,1]<br>Output: 6</p></blockquote><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><p>左右 底部 三个点<br>左边最大 - 底部<br>右边最大 - 底部 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> trap = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = height.length <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> leftMax = <span class="number">-1</span>, rightMax = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        leftMax =  height[left] &gt; leftMax ? height[left] : leftMax;</span><br><span class="line">        rightMax =  height[right] &gt; rightMax ? height[right] : rightMax;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(leftMax &gt; rightMax)&#123;</span><br><span class="line">            res += rightMax - height[right];</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res += leftMax - height[left];</span><br><span class="line">            left ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|String|Backtracking|17. Letter Combinations of a Phone Number</title>
      <link href="/2020/07/17/LeetCode%7CString%7CBacktracking%7C17.%20Letter%20Combinations%20of%20a%20Phone%20Number/"/>
      <url>/2020/07/17/LeetCode%7CString%7CBacktracking%7C17.%20Letter%20Combinations%20of%20a%20Phone%20Number/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem "></a><a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener">Problem </a></h1><p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><p>const map = {<br>    2:”abc”,<br>    3:”def”,<br>    4:”ghi”,<br>    5:”jkl”,<br>    6:”mno”,<br>    7:”pqrs”,<br>    8:”tuv”,<br>    9:”wxyz”,<br>}</p><p>Example:</p><p>Input: “23”<br>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><p>回溯方法：</p><ol><li>遍历+ 字符串返回</li><li>字符串返回遍历：char遍历 利用map</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">digits</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> letterCombinations = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> len = digits.length;</span><br><span class="line">    <span class="keyword">if</span>(len === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params">n, str</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n === len)&#123;</span><br><span class="line">            res.push(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> char <span class="keyword">of</span> map[digits[n]])&#123;</span><br><span class="line">            go(n + <span class="number">1</span> ,str + char);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    go(<span class="number">0</span>, <span class="string">''</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = &#123;</span><br><span class="line">    <span class="number">2</span>:<span class="string">"abc"</span>,</span><br><span class="line">    <span class="number">3</span>:<span class="string">"def"</span>,</span><br><span class="line">    <span class="number">4</span>:<span class="string">"ghi"</span>,</span><br><span class="line">    <span class="number">5</span>:<span class="string">"jkl"</span>,</span><br><span class="line">    <span class="number">6</span>:<span class="string">"mno"</span>,</span><br><span class="line">    <span class="number">7</span>:<span class="string">"pqrs"</span>,</span><br><span class="line">    <span class="number">8</span>:<span class="string">"tuv"</span>,</span><br><span class="line">    <span class="number">9</span>:<span class="string">"wxyz"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|String|Backtrack|22. Generate Parentheses</title>
      <link href="/2020/07/17/LeetCode%7CString%7CBacktrack%7C22.%20Generate%20Parentheses/"/>
      <url>/2020/07/17/LeetCode%7CString%7CBacktrack%7C22.%20Generate%20Parentheses/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><p>For example, given n = 3, a solution set is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params">left, right, str</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(left ===<span class="number">0</span> &amp;&amp; right ===<span class="number">0</span>)&#123;</span><br><span class="line">            res.push(str);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(left &gt; <span class="number">0</span>)</span><br><span class="line">            go(left<span class="number">-1</span>, right, str + <span class="string">'('</span>);</span><br><span class="line">        <span class="keyword">if</span>(right &gt; <span class="number">0</span>)</span><br><span class="line">            go(left, right<span class="number">-1</span>, str + <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    go(n,n,<span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|String|Backtrack|2. Add Two Numbers</title>
      <link href="/2020/07/17/LeetCode%7CString%7CBacktrack%7C2.%20Add%20Two%20Numbers/"/>
      <url>/2020/07/17/LeetCode%7CString%7CBacktrack%7C2.%20Add%20Two%20Numbers/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="noopener">Problem</a></h1><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>Example:</p><blockquote><p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807.</p></blockquote><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> head = <span class="keyword">new</span> ListNode();</span><br><span class="line">  <span class="keyword">let</span> cursor = head;</span><br><span class="line">  <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (l1 || l2 || carry) &#123;</span><br><span class="line">    cursor.next = <span class="keyword">new</span> ListNode();</span><br><span class="line">    cursor = cursor.next;</span><br><span class="line">    <span class="keyword">let</span> val = (l1 ? l1.val : <span class="number">0</span>) + (l2 ? l2.val : <span class="number">0</span>) + carry;</span><br><span class="line">    carry = val &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    cursor.val = val % <span class="number">10</span>;</span><br><span class="line">    l1 = l1 ? l1.next : <span class="literal">null</span>;</span><br><span class="line">    l2 = l2 ? l2.next : <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="self"><a href="#self" class="headerlink" title="self"></a>self</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> ListNode(<span class="number">-1</span>), dummy = res, sum = <span class="number">0</span>,carry = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!l1 || !l2)&#123;</span><br><span class="line">        <span class="keyword">return</span> l1  || l2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(l1 || l2 || sum&gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1)&#123;</span><br><span class="line">            sum += l1.val;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l2)&#123;</span><br><span class="line">            sum += l2.val;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(sum &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">            sum -= <span class="number">10</span>;</span><br><span class="line">            carry = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dummy.next = <span class="keyword">new</span> ListNode(sum);</span><br><span class="line">        dummy = dummy.next;</span><br><span class="line">        sum = carry;</span><br><span class="line">        carry = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|String|Roman to Integer</title>
      <link href="/2020/07/17/%20LeetCode%7CString%7C13Roman%20to%20Integer/"/>
      <url>/2020/07/17/%20LeetCode%7CString%7C13Roman%20to%20Integer/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="noopener">Problem</a></h1><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p><blockquote><p>Symbol       Value<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000</p></blockquote><p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><p>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.<br>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p><p>Example 1:</p><blockquote><p>Input: “III”<br>Output: 3</p></blockquote><p> Example 2:</p><blockquote><p>Input: “IV”<br>Output: 4</p></blockquote><p>Example 3:</p><blockquote><p>Input: “IX”<br>Output: 9</p></blockquote><p>Example 4:</p><blockquote><p>Input: “LVIII”<br>Output: 58<br>Explanation: L = 50, V= 5, III = 3.</p></blockquote><p>Example 5:</p><blockquote><p>Input: “MCMXCIV”<br>Output: 1994<br>Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</p></blockquote><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++)&#123;</span><br><span class="line">        <span class="comment">// number &lt; undefined is false</span></span><br><span class="line">        <span class="keyword">if</span>(symbol[s[i]] &lt; symbol[s[i+<span class="number">1</span>]])</span><br><span class="line">            val -= symbol[s[i]] ;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            val += symbol[s[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> symbol =&#123;</span><br><span class="line">    <span class="string">"I"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">"V"</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="string">"X"</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="string">"L"</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="string">"C"</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="string">"D"</span>:<span class="number">500</span>,</span><br><span class="line">    <span class="string">"M"</span>:<span class="number">1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|String|12. Integer to Roman</title>
      <link href="/2020/07/17/LeetCode%7CString%7C12.%20Integer%20to%20Roman/"/>
      <url>/2020/07/17/LeetCode%7CString%7C12.%20Integer%20to%20Roman/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem "></a><a href="https://leetcode.com/problems/integer-to-roman/" target="_blank" rel="noopener">Problem </a></h1><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p><table><thead><tr><th>Symbol</th><th>Value</th></tr></thead><tbody><tr><td>I</td><td>1</td></tr><tr><td>V</td><td>5</td></tr><tr><td>X</td><td>10</td></tr><tr><td>L</td><td>50</td></tr><tr><td>C</td><td>100</td></tr><tr><td>D</td><td>500</td></tr><tr><td>M</td><td>1000</td></tr></tbody></table><p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><p>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.<br>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p><p>Example 1:</p><blockquote><p>Input: 3<br>Output: “III”</p></blockquote><p>Example 2:</p><blockquote><p>Input: 4<br>Output: “IV”</p></blockquote><p>Example 3:</p><blockquote><p>Input: 9<br>Output: “IX”</p></blockquote><p>Example 4:</p><blockquote><p>Input: 58<br>Output: “LVIII”<br>Explanation: L = 50, V = 5, III = 3.</p></blockquote><p>Example 5:</p><blockquote><p>Input: 1994<br>Output: “MCMXCIV”<br>Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</p></blockquote><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intToRoman = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stringArr = [];</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        b = <span class="built_in">Math</span>.floor(num % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(b &lt; <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; b; j ++)</span><br><span class="line">                stringArr.push(symbol[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b === <span class="number">4</span>)&#123;<span class="comment">// VI -&gt; IV</span></span><br><span class="line">            stringArr.push(symbol[i+<span class="number">1</span>]);</span><br><span class="line">            stringArr.push(symbol[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b === <span class="number">5</span>)&#123;</span><br><span class="line">            stringArr.push(symbol[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b &lt; <span class="number">9</span>)&#123;<span class="comment">// IIIX -&gt; XIII</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">5</span>; j &lt; b; j ++)</span><br><span class="line">                stringArr.push(symbol[i]);</span><br><span class="line">            stringArr.push(symbol[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b === <span class="number">9</span>)&#123;<span class="comment">// b = 9  XI -&gt; IX</span></span><br><span class="line">            stringArr.push(symbol[i+<span class="number">2</span>]);</span><br><span class="line">            stringArr.push(symbol[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        num = <span class="built_in">Math</span>.floor(num/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stringArr.reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> symbol =[<span class="string">"I"</span>,<span class="string">"V"</span>,<span class="string">"X"</span>,<span class="string">"L"</span>,<span class="string">"C"</span>, <span class="string">"D"</span>,<span class="string">"M"</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|String|344. Reverse String</title>
      <link href="/2020/07/17/LeetCode%7CString%7C344.%20Reverse%20String/"/>
      <url>/2020/07/17/LeetCode%7CString%7C344.%20Reverse%20String/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Write a function that reverses a string. The input string is given as an array of characters char[].</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>You may assume all the characters consist of printable ascii characters.</p><p>Example 1:</p><blockquote><p>Input: [“h”,”e”,”l”,”l”,”o”]<br>Output: [“o”,”l”,”l”,”e”,”h”]</p></blockquote><p>Example 2:</p><blockquote><p>Input: [“H”,”a”,”n”,”n”,”a”,”h”]<br>Output: [“h”,”a”,”n”,”n”,”a”,”H”]</p></blockquote><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><p>String 最后一位是 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[]&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length/<span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = s[i];</span><br><span class="line">        s[i] = s[s.length - i <span class="number">-1</span>]</span><br><span class="line">        s[s.length - i <span class="number">-1</span>] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|String|937. Reorder Data in Log Files</title>
      <link href="/2020/07/17/LeetCode%7CString%7C937._Reorder%20Data%20in%20Log%20Files/"/>
      <url>/2020/07/17/LeetCode%7CString%7C937._Reorder%20Data%20in%20Log%20Files/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>You have an array of logs.  Each log is a space delimited string of words.</p><p>For each log, the first word in each log is an alphanumeric identifier.  Then, either:</p><p>Each word after the identifier will consist only of lowercase letters, or;<br>Each word after the identifier will consist only of digits.<br>We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.</p><p>Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.</p><p>Return the final order of the logs.</p><blockquote><p>Example 1:</p><p>Input: logs = [“dig1 8 1 5 1”,”let1 art can”,”dig2 3 6”,”let2 own kit dig”,”let3 art zero”]<br>Output: [“let1 art can”,”let3 art zero”,”let2 own kit dig”,”dig1 8 1 5 1”,”dig2 3 6”]</p></blockquote><p>Constraints:</p><blockquote><p>0 &lt;= logs.length &lt;= 100<br>3 &lt;= logs[i].length &lt;= 100<br>logs[i] is guaranteed to have an identifier, and a word after the identifier.</p></blockquote><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reorderLogFiles = <span class="function"><span class="keyword">function</span>(<span class="params">logs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> letters = [];</span><br><span class="line">  <span class="keyword">let</span> digits = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; logs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isFinite</span>(logs[i].split(<span class="string">' '</span>)[<span class="number">1</span>])) &#123;</span><br><span class="line">      digits.push(logs[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> letters.push(logs[i]);</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  letters.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> aCut = a.slice(a.indexOf(<span class="string">' '</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> bCut = b.slice(b.indexOf(<span class="string">' '</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (aCut === bCut) &#123;</span><br><span class="line">      <span class="keyword">return</span> a &gt; b ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> aCut &gt; bCut ? <span class="number">1</span> : <span class="number">-1</span>; </span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> [...letters, ...digits]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reorderLogFiles = <span class="function"><span class="keyword">function</span>(<span class="params">logs</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// String to array</span></span><br><span class="line">    <span class="keyword">const</span> body = <span class="function"><span class="params">s</span> =&gt;</span> s.slice(s.indexOf(<span class="string">' '</span>) + <span class="number">1</span>) ;</span><br><span class="line">    <span class="comment">// Boolean </span></span><br><span class="line">    <span class="keyword">const</span> isNum = <span class="function"><span class="params">c</span> =&gt;</span> <span class="regexp">/\d/</span>.test(c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//compare id</span></span><br><span class="line">    <span class="keyword">const</span> compare = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> n = body(a).localeCompare(body(b));</span><br><span class="line">        <span class="keyword">if</span>(n !== <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> a.localeCompare(b);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> digitLogs = [];</span><br><span class="line">    <span class="keyword">const</span> letterLogs = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">const</span> log <span class="keyword">of</span> logs)&#123;</span><br><span class="line">        <span class="keyword">if</span> (isNum(body(log))) digitLogs.push(log);</span><br><span class="line">        <span class="keyword">else</span> letterLogs.push(log);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [...letterLogs.sort(compare), ...digitLogs];</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|Greedy|200 Number of Islands</title>
      <link href="/2020/07/15/LeetCode%7CGreedy%7C200%20Number%20of%20Islands%20/"/>
      <url>/2020/07/15/LeetCode%7CGreedy%7C200%20Number%20of%20Islands%20/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p><p>Example 1:</p><blockquote><p>Input: grid = [<br>  [“1”,”1”,”1”,”1”,”0”],<br>  [“1”,”1”,”0”,”1”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”0”,”0”,”0”]<br>]<br>Output: 1</p></blockquote><p>Example 2:</p><p><code>Input: grid = [  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]]Output: 3</code></p><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><p><a href="https://leetcode.com/problems/number-of-islands/discuss/429842/JavaScript-DFS-Commented-Thought-Process-Beats-100-Time-and-Space" target="_blank" rel="noopener">here</a></p><p>Below is what I typed out on a google doc in preparation for a google phone interview.<br>I thought it may be helpful for others to see and give feedback on my thought process, and if it makes sense/is followable. After all, that’s what I want my interviewer to do, understand me.<br>Goal: Count number of islands<br>Rules:</p><p>An island is surrounded by water(0’s)<br>We count things apart of our island if it is horizontal or vertical connected<br>Plan:<br>Start at the top left of the 2d array, and visit the first row, and all its columns, trying to find the start of the first island<br>Once we find a 1, we can increment the number of islands, but we want to know where the island ends. So let’s look and follow any of the horizontal or vertical spots near the current position we are on.<br>First, let’s mark the current start/visited parts of the islands as visited by turning them into a 0,<br>Second, explore all the adjacent possibilities,<br>If one of them is a 1, recursively turn it into a 0 and check its children<br>Once we are done, we should have gotten rid of the island that we discovered and can move on to the next island, if it exists in the 2d array</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">grid</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numIslands = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!grid)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> m =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++)&#123;</span><br><span class="line">            res += grid[i][j] -<span class="string">"0"</span>;</span><br><span class="line">            dfs(i, j, grid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">x, y, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span> || y&lt; <span class="number">0</span>|| x&gt;= array.length || y&gt;= array[<span class="number">0</span>].length || array[x][y] ===<span class="string">"0"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    array[x][y] = <span class="string">"0"</span>;</span><br><span class="line">    dfs(x<span class="number">-1</span>, y, array);</span><br><span class="line">    dfs(x+<span class="number">1</span>, y, array);</span><br><span class="line">    dfs(x, y<span class="number">-1</span>, array);</span><br><span class="line">    dfs(x, y+<span class="number">1</span>, array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode| Slip_Window| 3_Longest_Substring_Without_Repeating_Characters</title>
      <link href="/2020/07/14/LeetCode-Slip_Window-3_Longest_Substring_Without_Repeating_Characters/"/>
      <url>/2020/07/14/LeetCode-Slip_Window-3_Longest_Substring_Without_Repeating_Characters/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given a string, find the length of the longest substring without repeating characters.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;abcabcbb&quot;</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class="line">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h3 id="HashTable-amp-keeping-track"><a href="#HashTable-amp-keeping-track" class="headerlink" title="HashTable &amp; keeping track"></a>HashTable &amp; keeping track</h3><p>Runs at Time: O(n) and Space: O(min(n + m)) </p><p>这题是比较典型的滑动窗口问题，定义一个左边界 left 和一个右边界 right，形成一个窗口，并且在这个窗口中保证不出现重复的字符串。</p><p>这需要用到一个新的变量 freqMap，用来记录窗口中的字母出现的频率数。在此基础上，先尝试取窗口的右边界再右边一个位置的值，也就是 str[right + 1]，然后拿这个值去 freqMap 中查找：</p><p>这个值没有出现过，那就直接把 right ++，扩大窗口右边界。<br>如果这个值出现过，那么把 left ++，缩进左边界，并且记得把 str[left] 位置的值在 freqMap 中减掉。<br>循环条件是 left &lt; str.length，允许左边界一直滑动到字符串的右界。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = str.length</span><br><span class="line">  <span class="comment">// 滑动窗口为s[left...right]</span></span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> right = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">let</span> freqMap = &#123;&#125; <span class="comment">// 记录当前子串中下标对应的出现频率</span></span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span> <span class="comment">// 找到的满足条件子串的最长长度</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left &lt; n) &#123;</span><br><span class="line">    <span class="keyword">let</span> nextLetter = str[right + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> (!freqMap[nextLetter] &amp;&amp; nextLetter !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      freqMap[nextLetter] = <span class="number">1</span></span><br><span class="line">      right++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      freqMap[str[left]] = <span class="number">0</span></span><br><span class="line">      left++</span><br><span class="line">    &#125;</span><br><span class="line">    max = <span class="built_in">Math</span>.max(max, right - left + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hi this is a really elegant solution using hash table and keeping track, when was the last time we saw a certain character. While the characters are not repeating we are updating the longest variable, once we get to repeating we update the start_idx from which we start trimming the original string</p><p>Runs at Time: O(n) and Space: O(min(n + m)) where n is the number of characters in a string and m is the number of characters in alphabet of string. If every single character of an alphabet is included, we will end up using them all, and if not then we gonna at most use n characters, so min of those to makes sanse</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!s)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> c = s.charAt(i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(map[c] !== <span class="literal">undefined</span> &amp;&amp; map[c] &gt;= start)&#123;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(max, i - start);</span><br><span class="line">            start = map[c] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        map[c] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    max = <span class="built_in">Math</span>.max(max, s.length - start)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JS-function"><a href="#JS-function" class="headerlink" title="JS function"></a>JS function</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lengthOfLongestSubstring = <span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// keeps track of the most recent index of each letter.</span></span><br><span class="line">    <span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">    <span class="comment">// keeps track of the starting index of the current substring.</span></span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">max, v, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// starting index of substring is 1 + (the last index of this letter) to ensure this letter is not counted twice.</span></span><br><span class="line">        left = map[v] &gt;= left ? map[v] + <span class="number">1</span> : left;</span><br><span class="line">        <span class="comment">// updates last recorded index of letter to the most recent index.</span></span><br><span class="line">        map[v] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// indices of current substring is (idx - leftIdx, idx).</span></span><br><span class="line">        <span class="comment">// +1 because if your substring starts and ends at index 0, it still has a length of 1.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(max, i - left + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Slip_Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|stack|56 Merge Intervals</title>
      <link href="/2020/07/14/LeetCode_56%20-%20Merge%20Intervals/"/>
      <url>/2020/07/14/LeetCode_56%20-%20Merge%20Intervals/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://leetcode.com/problems/merge-intervals/" target="_blank" rel="noopener">题目</a></h1><p>Given a collection of intervals, merge all overlapping intervals.</p><p>Example 1:</p><blockquote><p>Input: [[1,3],[2,6],[8,10],[15,18]]<br>Output: [[1,6],[8,10],[15,18]]<br>Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</p></blockquote><p>Example 2:</p><blockquote><p>Input: [[1,4],[4,5]]<br>Output: [[1,5]]<br>Explanation: Intervals [1,4] and [4,5] are considered overlapping.</p></blockquote><p>NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="js默认sort"><a href="#js默认sort" class="headerlink" title="js默认sort"></a>js默认sort</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">intervals</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">    </span><br><span class="line">    intervals.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b[<span class="number">0</span>] - a[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> res = [intervals.pop()];</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">while</span> (intervals.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> [a, b] = res[res.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">const</span> [c, d] = intervals.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(b &gt;= c)&#123;</span><br><span class="line">            <span class="keyword">const</span> start = <span class="built_in">Math</span>.min(a, c);</span><br><span class="line">            <span class="keyword">const</span> end = <span class="built_in">Math</span>.max(b, d);</span><br><span class="line">            </span><br><span class="line">            res[res.length - <span class="number">1</span>][<span class="number">0</span>] = start;</span><br><span class="line">            res[res.length - <span class="number">1</span>][<span class="number">1</span>] = end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res.push([c, d])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|Array|88 Merge Sorted Array</title>
      <link href="/2020/07/14/LeetCode_88%20-%20Merge%20Sorted%20Array/"/>
      <url>/2020/07/14/LeetCode_88%20-%20Merge%20Sorted%20Array/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.com/problems/merge-sorted-array/" target="_blank" rel="noopener">88. Merge Sorted Array</a><br>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p><p>Note:</p><p>The number of elements initialized in nums1 and nums2 are m and n respectively.<br>You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.<br>Example:</p><p>Input:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3</p><p>Output: [1,2,2,3,5,6]</p><p>Constraints:</p><p>-10^9 &lt;= nums1[i], nums2[i] &lt;= 10^9<br>nums1.length == m + n<br>nums2.length == n</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">m</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = m + n</span><br><span class="line">    m --;</span><br><span class="line">    n --;</span><br><span class="line">    <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">         <span class="keyword">if</span> (n &lt; <span class="number">0</span> || nums1[m] &gt; nums2[n]) &#123;</span><br><span class="line">            nums1[len] = nums1[m--];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[len] = nums2[n--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>先复制，然后再排序（默认）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> merge = <span class="function">(<span class="params">A, M, B, N</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = M; i &lt; M + N; ++i)</span><br><span class="line">        A[i] = B[i - M];</span><br><span class="line">    A.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|Array|350 Intersection_of_Two_Arrays_II</title>
      <link href="/2020/07/14/LeetCode_Array_350_Intersection_of_Two_Arrays_II/"/>
      <url>/2020/07/14/LeetCode_Array_350_Intersection_of_Two_Arrays_II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/" target="_blank" rel="noopener">题目</a></h1><p>Given two arrays, write a function to compute their intersection.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">Output: [2,2]</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">Output: [4,9]</span><br></pre></td></tr></table></figure><p>Note:</p><p>Each element in the result should appear as many times as it shows in both arrays.<br>The result can be in any order.<br>Follow up:</p><p>What if the given array is already sorted? How would you optimize your algorithm?<br>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?<br>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h3 id="需要内存，不需要排序"><a href="#需要内存，不需要排序" class="headerlink" title="需要内存，不需要排序"></a>需要内存，不需要排序</h3><h4 id="HASHMAP"><a href="#HASHMAP" class="headerlink" title="HASHMAP"></a>HASHMAP</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersect = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map1 = countNums(nums1);</span><br><span class="line">    <span class="keyword">let</span> map2 = countNums(nums2);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> map1.keys())&#123;</span><br><span class="line">        <span class="keyword">const</span> count = <span class="built_in">Math</span>.min(map1.get(num), map2.get(num));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">            res.push(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countNums</span>(<span class="params">nums</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> num = nums[i];</span><br><span class="line">        <span class="keyword">let</span> count = map.get(num);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(count)&#123;</span><br><span class="line">             map.set(num, count + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            map.set(num, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersect = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> solution = [];</span><br><span class="line">    <span class="keyword">if</span> (nums1.length &lt; nums2.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> intersect(nums2, nums1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Instead of HashMap, nums1 to acculate</span></span><br><span class="line">    <span class="comment">// [1, 2, 2, 1]</span></span><br><span class="line">    <span class="comment">// &#123;'1':2, '2':2&#125;   </span></span><br><span class="line">    <span class="keyword">const</span> obj = nums1.reduce(<span class="function">(<span class="params">acc, num</span>) =&gt;</span> &#123;</span><br><span class="line">        acc[num] = acc[num] + <span class="number">1</span> || <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//find the num in nums2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums2.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[nums2[i]] !== <span class="literal">undefined</span> &amp;&amp; obj[nums2[i]] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      obj[nums2[i]] = obj[nums2[i]] - <span class="number">1</span>;</span><br><span class="line">      solution.push(nums2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> solution;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="需要排序"><a href="#需要排序" class="headerlink" title="需要排序"></a>需要排序</h3><h4 id="双指针解题"><a href="#双指针解题" class="headerlink" title="双指针解题"></a>双指针解题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersect = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Sort array</span></span><br><span class="line">    nums1.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    nums2.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i&lt;nums1.length &amp;&amp; j&lt; nums2.length)&#123;</span><br><span class="line">        <span class="keyword">let</span> x = nums1[i];</span><br><span class="line">        <span class="keyword">let</span> y = nums2[j];</span><br><span class="line">        <span class="keyword">if</span>(x === y)&#123;</span><br><span class="line">            res.push(nums1[i]);</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; y)&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// x &lt; y;</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|DFS|198 HouseRobber</title>
      <link href="/2020/07/14/LeetCode_DFS_198_HouseRobber/"/>
      <url>/2020/07/14/LeetCode_DFS_198_HouseRobber/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem "></a><a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="noopener">Problem </a></h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p><p>Example 1:</p><blockquote><p>Input: nums = [1,2,3,1]<br>Output: 4<br>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).<br>             Total amount you can rob = 1 + 3 = 4.</p></blockquote><p>Example 2:</p><blockquote><p>Input: nums = [2,7,9,3,1]<br>Output: 12<br>Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).<br>             Total amount you can rob = 2 + 9 + 1 = 12.</p></blockquote><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3><p>动态规划的一个很重要的过程就是找到「状态」和「状态转移方程」，在这个问题里，设 i 是当前屋子的下标，状态就是 以 i 为起点偷窃的最大价值</p><p>在某一个房子面前，盗贼只有两种选择：偷或者不偷。</p><p>偷的话，价值就是「当前房子的价值」+「下两个房子开始盗窃的最大价值」<br>不偷的话，价值就是「下一个房子开始盗窃的最大价值」<br>在这两个值中，选择最大值记录在 dp[i]中，就得到了以 i 为起点所能偷窃的最大价值。。</p><p>动态规划的起手式，找基础状态，在这题中，以终点为起点的最大价值一定是最好找的，因为终点不可能再继续往后偷窃了，所以设 n 为房子的总数量， dp[n - 1] 就是 nums[n - 1]，小偷只能选择偷窃这个房子，而不能跳过去选择下一个不存在的房子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dp = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">let</span> robNow = nums[i] + (dp [i + <span class="number">2</span>] || <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">let</span> robNext = dp[i + <span class="number">1</span>] || <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        dp[i] = <span class="built_in">Math</span>.max(robNow, robNext);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="resource"><a href="#resource" class="headerlink" title="resource"></a>resource</h1><p><a href="https://mp.weixin.qq.com/s/7mJSpnHE319swy0LStpavQ" target="_blank" rel="noopener">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|DFS|515 FindLargestValueinEachTreeRow</title>
      <link href="/2020/07/14/LeetCode_DFS_515_FindLargestValueinEachTreeRow/"/>
      <url>/2020/07/14/LeetCode_DFS_515_FindLargestValueinEachTreeRow/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>ou need to find the largest value in each row of a binary tree.</p><p>Example:</p><blockquote><p>Input: </p><pre><code>    1   / \  3   2 / \   \  5   3   9 </code></pre><p>Output: [1, 3, 9]</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> largestValues = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> helper = <span class="function">(<span class="params">node, i</span>) =&gt;</span> &#123;</span><br><span class="line">        res[i] = res[i] &gt; node.val ? res[i]  : node.val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.left !== <span class="literal">null</span>)&#123;</span><br><span class="line">            helper(node.left, i + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.right !== <span class="literal">null</span>)&#123;</span><br><span class="line">            helper(node.right, i + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    helper(root, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|24 Swap Node In Pairs</title>
      <link href="/2020/07/14/LeetCode_24_SwapNodeInPairs/"/>
      <url>/2020/07/14/LeetCode_24_SwapNodeInPairs/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>You may not modify the values in the list’s nodes, only nodes itself may be changed.</p><p>Example:</p><blockquote><p>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p></blockquote><h1 id="Sovle"><a href="#Sovle" class="headerlink" title="Sovle"></a>Sovle</h1><h3 id="Link-Table"><a href="#Link-Table" class="headerlink" title="Link Table"></a>Link Table</h3><p>这题本意比较简单，1 -&gt; 2 -&gt; 3 -&gt; 4 的情况下可以定义一个递归的辅助函数 helper，这个辅助函数对于节点和它的下一个节点进行交换，比如 helper(1) 处理 1 -&gt; 2，并且把交换变成 2 -&gt; 1 的尾节点 1的next继续指向 helper(3)也就是交换后的 4 -&gt; 3。</p><p>边界情况在于，如果顺利的作了两两交换，那么交换后我们的函数返回出去的是 交换后的头部节点，但是如果是奇数剩余项的情况下，没办法做交换，那就需要直接返回 原本的头部节点。这个在 helper函数和主函数中都有体现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> helper = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> tempNext = node.next;</span><br><span class="line">        <span class="keyword">if</span>(tempNext)&#123;</span><br><span class="line">            <span class="keyword">let</span> tempNextNext = node.next.next; <span class="comment">//1 --&gt; 3--&gt;</span></span><br><span class="line">            <span class="comment">//swap 1-&gt; 2 to 2-&gt;1</span></span><br><span class="line">            node.next.next = node;</span><br><span class="line">            <span class="comment">//2 -&gt; 1 ---&gt;</span></span><br><span class="line">            node.next = tempNextNext ? helper(tempNextNext) : <span class="literal">null</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> tempNext || node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> res =helper(head);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res || head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> TwoPointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|DFS|257 Binary_Tree_Paths</title>
      <link href="/2020/07/14/LeetCode_257_Binary_Tree_Paths/"/>
      <url>/2020/07/14/LeetCode_257_Binary_Tree_Paths/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Given a binary tree, return all root-to-leaf paths.</p><p>Note: A leaf is a node with no children.</p><p>Example:</p><blockquote><p>Input:</p><p>   1<br> /   <br>2     3<br> <br>  5</p><p>Output: [“1-&gt;2-&gt;5”, “1-&gt;3”]</p></blockquote><p>Explanation: All root-to-leaf paths are: 1-&gt;2-&gt;5, 1-&gt;3</p><h1 id="Sovle"><a href="#Sovle" class="headerlink" title="Sovle"></a>Sovle</h1><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>用当前节点的值去拼接左右子树递归调用当前函数获得的所有路径。</p><p>也就是根节点拼上以左子树为根节点得到的路径，加上根节点拼上以右子树为根节点得到的所有路径。</p><p>直到叶子节点，仅仅返回包含当前节点的值的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    traverse(root, <span class="string">""</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">node ,path</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!node.left &amp;&amp; !node.right)&#123;</span><br><span class="line">            res.push(path + node.val)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        traverse(node.left, path + node.val + <span class="string">"-&gt;"</span> );</span><br><span class="line">        traverse(node.right, path + node.val + <span class="string">"-&gt;"</span> );</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> paths = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!root)</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> queue = [[root, []]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(queue.length)&#123;</span><br><span class="line">        <span class="keyword">const</span> [node, res] = queue.shift();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!node.left &amp;&amp; !node.right)&#123;</span><br><span class="line">        <span class="comment">// array to string</span></span><br><span class="line">            paths.push(res.concat([node.val]).join(<span class="string">'-&gt;'</span>));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node.left !== <span class="literal">null</span>)&#123;</span><br><span class="line">            queue.push([node.left ,res.concat([node.val])]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node.right !== <span class="literal">null</span>)&#123;</span><br><span class="line">            queue.push([node.right ,res.concat([node.val])]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> paths</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|Greedy|455 Assign Cookies</title>
      <link href="/2020/07/14/LeetCode_Greedy_455_Assign%20Cookies/"/>
      <url>/2020/07/14/LeetCode_Greedy_455_Assign%20Cookies/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj &gt;= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.</p><p>Note:<br>You may assume the greed factor is always positive.<br>You cannot assign more than one cookie to one child.</p><p>Example 1:</p><blockquote><p>Input: [1,2,3], [1,1]</p><p>Output: 1</p><p>Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3.<br>And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.<br>You need to output 1.</p></blockquote><p>Example 2:</p><blockquote><p>Input: [1,2], [1,2,3]</p><p>Output: 2</p><p>Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2.<br>You have 3 cookies and their sizes are big enough to gratify all of the children,<br>You need to output 2.</p></blockquote><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><h3 id="itr"><a href="#itr" class="headerlink" title="itr"></a>itr</h3><p>饼干和孩子的需求都排序好，然后从最小的饼干分配给需求最小的孩子开始，不断的尝试新的饼干和新的孩子，这样能保证每个分给孩子的饼干都恰到好处的不浪费，又满足需求。</p><p>利用双指针不断的更新 i 孩子的需求下标和 j饼干的值，直到两者有其一达到了终点位置：</p><p>如果当前的饼干不满足孩子的胃口，那么把 j++ 寻找下一个饼干，不用担心这个饼干被浪费，因为这个饼干更不可能满足下一个孩子（胃口更大）。<br>如果满足，那么 i++; j++; count++ 记录当前的成功数量，继续寻找下一个孩子和下一个饼干。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">g</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findContentChildren = <span class="function"><span class="keyword">function</span>(<span class="params">g, s</span>) </span>&#123;</span><br><span class="line">    g.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a - b)</span><br><span class="line">    s.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a - b)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; g.length &amp;&amp; j &lt; s.length)&#123;</span><br><span class="line">        <span class="keyword">let</span> need = g[i];</span><br><span class="line">        <span class="keyword">let</span> cookie = s[j];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cookie &gt;= need)&#123;</span><br><span class="line">            count ++;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p><a href="https://mp.weixin.qq.com/s/7mJSpnHE319swy0LStpavQ" target="_blank" rel="noopener">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|Two_Pointer|16 3Sum Closet</title>
      <link href="/2020/07/14/LeetCode_Two_Pointer_16-3Sum_Closet/"/>
      <url>/2020/07/14/LeetCode_Two_Pointer_16-3Sum_Closet/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>16—<a href="https://leetcode.com/problems/3sum-closest/" target="_blank" rel="noopener">3Sum Closest</a><br>Medium</p><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [-1,2,1,-4], target &#x3D; 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 &#x3D; 2).</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 &lt;&#x3D; nums.length &lt;&#x3D; 10^3</span><br><span class="line">-10^3 &lt;&#x3D; nums[i] &lt;&#x3D; 10^3</span><br><span class="line">-10^4 &lt;&#x3D; target &lt;&#x3D; 10^4</span><br></pre></td></tr></table></figure><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>先按照升序排序，然后分别从左往右依次选择一个基础点 i（0 &lt;= i &lt;= nums.length - 3），在基础点的右侧用双指针去不断的找最小的差值。</p><p>假设基础点是 i，初始化的时候，双指针分别是：</p><p>left：i + 1，基础点右边一位。<br>right: nums.length - 1 数组最后一位。<br>然后求此时的和，如果和大于 target，那么可以把右指针左移一位，去试试更小一点的值，反之则把左指针右移。</p><p>在这个过程中，不断更新全局的最小差值 min，和此时记录下来的和 res。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSumClosest = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">if</span>(len === <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> getSum(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span> a-b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> min = <span class="literal">Infinity</span>;</span><br><span class="line">    <span class="keyword">let</span> res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> basic = nums[i];</span><br><span class="line">        <span class="keyword">let</span> left = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> right = len - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">let</span> sum = basic + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">let</span> diff = <span class="built_in">Math</span>.abs(sum - target);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(diff &lt; min)&#123;</span><br><span class="line">                min = diff;</span><br><span class="line">                res = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(sum &lt; target)&#123;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( sum &gt; target)&#123;</span><br><span class="line">                right --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">nums</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">total, cur</span>)=&gt;</span> total + cur, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p><a href="https://mp.weixin.qq.com/s/7mJSpnHE319swy0LStpavQ" target="_blank" rel="noopener">双指针问题</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|String|20 ValidParentheses</title>
      <link href="/2020/07/14/LeetCode_String_20_ValidParentheses/"/>
      <url>/2020/07/14/LeetCode_String_20_ValidParentheses/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p><p>An input string is valid if:</p><p>Open brackets must be closed by the same type of brackets.<br>Open brackets must be closed in the correct order.<br>Note that an empty string is also considered valid.</p><p>Example 1:</p><blockquote><p>Input: “()”<br>Output: true</p></blockquote><p>Example 2:</p><blockquote><p>Input: “()[]{}”<br>Output: true</p></blockquote><p>Example 3:</p><blockquote><p>Input: “(]”<br>Output: false</p></blockquote><p>Example 4:</p><blockquote><p>Input: “([)]”<br>Output: false</p></blockquote><p>Example 5:</p><blockquote><p>Input: “{[]}”<br>Output: true</p></blockquote><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> preS = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span>(s !== preS)&#123;</span><br><span class="line">        preS = s</span><br><span class="line">        s = s.split(<span class="string">'()'</span>).join(<span class="string">''</span>)</span><br><span class="line">        s = s.split(<span class="string">'[]'</span>).join(<span class="string">''</span>)</span><br><span class="line">        s = s.split(<span class="string">'&#123;&#125;'</span>).join(<span class="string">''</span>) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!s)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stack = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> c = s.charAt(i);</span><br><span class="line">        <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                stack.push(<span class="string">')'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">                stack.push(<span class="string">'&#125;'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">                stack.push(<span class="string">']'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">if</span>(c !== stack.pop())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.length === <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 88 ms, faster than 21.46% of JavaScript online submissions for Valid Parentheses.<br>Memory Usage: 33.1 MB, less than 99.01% of JavaScript online submissions for Valid Parentheses.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|Graph| 133 Clone Graph</title>
      <link href="/2020/07/14/LeetCode_Graph_133_%20Clone_Graph/"/>
      <url>/2020/07/14/LeetCode_Graph_133_%20Clone_Graph/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://leetcode.com/problems/clone-graph/" target="_blank" rel="noopener">题目</a></h1><p>Given a reference of a node in a connected undirected graph.</p><p>Return a deep copy (clone) of the graph.</p><p>Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.</p><blockquote><p>class Node {<br>    public int val;<br>    public List<Node> neighbors;<br>}</Node></p></blockquote><p>Test case format:</p><p>For simplicity sake, each node’s value is the same as the node’s index (1-indexed). For example, the first node with val = 1, the second node with val = 2, and so on. The graph is represented in the test case using an adjacency list.</p><p>Adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p><p>The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.</p><p>Example 1:<br><img src="/2020/07/14/LeetCode_Graph_133_%20Clone_Graph/Cypress_Field_Rendering.png" alt></p><blockquote><p>Input: adjList = [[2,4],[1,3],[2,4],[1,3]]<br>Output: [[2,4],[1,3],[2,4],[1,3]]<br>Explanation: There are 4 nodes in the graph.<br>1st node (val = 1)’s neighbors are 2nd node (val = 2) and 4th node (val = 4).<br>2nd node (val = 2)’s neighbors are 1st node (val = 1) and 3rd node (val = 3).<br>3rd node (val = 3)’s neighbors are 2nd node (val = 2) and 4th node (val = 4).<br>4th node (val = 4)’s neighbors are 1st node (val = 1) and 3rd node (val = 3).</p></blockquote><p>Example 2:<br><img src="/2020/07/14/LeetCode_Graph_133_%20Clone_Graph/graph.png" alt></p><blockquote><p>Input: adjList = [[]]<br>Output: [[]]<br>Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.</p></blockquote><p>Example 3:</p><blockquote><p>Input: adjList = []<br>Output: []<br>Explanation: This an empty graph, it does not have any nodes.</p></blockquote><p>Example 4:<br><img src="/2020/07/14/LeetCode_Graph_133_%20Clone_Graph/graph-1.png" alt></p><blockquote><p>Input: adjList = [[2],[1]]<br>Output: [[2],[1]]</p></blockquote><p>Constraints:</p><p>1 &lt;= Node.val &lt;= 100<br>Node.val is unique for each node.<br>Number of Nodes will not exceed 100.<br>There is no repeated edges and no self-loops in the graph.<br>The Graph is connected and all nodes can be visited starting from the given node.</p><h1 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h1><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val, neighbors) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val === undefined ? 0 : val;</span></span><br><span class="line"><span class="comment"> *    this.neighbors = neighbors === undefined ? [] : neighbors;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">node</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Node&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DFS</span></span><br><span class="line"><span class="keyword">var</span> cloneGraph = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">const</span> clone = <span class="function"><span class="params">root</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !map.has(root.val) )&#123;</span><br><span class="line">            map.set(root.val, <span class="keyword">new</span> Node(root.val) );</span><br><span class="line">            map.get(root.val).neighbors = root.neighbors.map(clone);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone(node);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="迭代模版"><a href="#迭代模版" class="headerlink" title="迭代模版"></a>迭代模版</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cloneGraph = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!node)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> queue = [node], visited = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    visited.set(node, <span class="keyword">new</span> Node(node.val))</span><br><span class="line">    <span class="keyword">while</span>(queue.length &gt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">const</span> curr = queue.pop()</span><br><span class="line">        curr.neighbors.forEach(<span class="function"><span class="params">neigbor</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited.has(neigbor))&#123;</span><br><span class="line">                visited.set(neigbor, <span class="keyword">new</span> Node(neigbor.val))</span><br><span class="line">                queue.unshift(neigbor)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> cloned = visited.get(curr)</span><br><span class="line">            <span class="keyword">const</span> cloneN = visited.get(neigbor)</span><br><span class="line">            cloned.neighbors.push(cloneN)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> visited.get(node);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode|Tree| 617 Merge_Tree</title>
      <link href="/2020/07/14/LeetCode_617_Merge_Tree/"/>
      <url>/2020/07/14/LeetCode_617_Merge_Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://leetcode.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">题目</a></h1><p>617- Merge Two Binary Trees</p><p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p><p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p><p>Example 1:</p><blockquote><p>Input:<br>    Tree 1                     Tree 2<br>          1                         2<br>         / \                       / \<br>        3   2                     1   3<br>       /                           \   \<br>      5                             4   7<br>Output:<br>Merged tree:<br>         3<br>        / <br>       4   5<br>      / \   \<br>     5   4   7</p></blockquote><p>Note: The merging process must start from the root nodes of both trees.</p><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">t1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">t2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">//递归算法：</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 1.以预购方式遍历树</span></span><br><span class="line"><span class="comment">// 2.检查两个树节点是否均为NULL</span></span><br><span class="line"><span class="comment">// 1.如果不是，则更新值</span></span><br><span class="line"><span class="comment">// 3.递归左子树</span></span><br><span class="line"><span class="comment">// 4.重复右子树</span></span><br><span class="line"><span class="comment">// 5.返回更新的树的根</span></span><br><span class="line"><span class="keyword">var</span> mergeTrees = <span class="function"><span class="keyword">function</span>(<span class="params">t1, t2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t1 &amp;&amp; !t2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!t1 || !t2)&#123;</span><br><span class="line">        <span class="keyword">return</span> t1 || t2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> root = <span class="keyword">new</span> TreeNode(t1.val + t2.val);</span><br><span class="line">    </span><br><span class="line">    root.left = mergeTrees(t1.left, t2.left);</span><br><span class="line">    root.right = mergeTrees(t1.right, t2.right);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="非递归-迭代）"><a href="#非递归-迭代）" class="headerlink" title="非递归(迭代）"></a>非递归(迭代）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;迭代算法：</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; 1.创建一个堆栈</span><br><span class="line">&#x2F;&#x2F; 2.将两棵树的根节点推入堆栈。</span><br><span class="line">&#x2F;&#x2F; 3.当堆栈不为空时，执行以下步骤：</span><br><span class="line">&#x2F;&#x2F; 1.从堆栈顶部弹出一个节点对</span><br><span class="line">&#x2F;&#x2F; 2.对于每个删除的节点对，添加与两个节点对应的值，并更新第一棵树中相应节点的值</span><br><span class="line">&#x2F;&#x2F; 3.如果第一棵树的左子节点存在，则将两棵树的左子节点（对）推入堆栈。</span><br><span class="line">&#x2F;&#x2F; 4.如果第一棵树的左子节点不存在，则将第二棵树的左子节点附加到第一棵树的当前节点</span><br><span class="line">&#x2F;&#x2F; 5.对正确的子对也执行相同的操作。</span><br><span class="line">&#x2F;&#x2F; 6.如果当前两个节点均为NULL，则继续从堆栈中弹出下一个节点。</span><br><span class="line">&#x2F;&#x2F;4. 返回</span><br></pre></td></tr></table></figure><p>迭代算法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeTrees = <span class="function">(<span class="params">t1, t2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (t1 === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> t2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  stack.push([t1, t2]);</span><br><span class="line">  <span class="keyword">while</span> (stack.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> t = stack.pop();</span><br><span class="line">    <span class="keyword">if</span> (t[<span class="number">0</span>] === <span class="literal">null</span> || t[<span class="number">1</span>] === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    t[<span class="number">0</span>].val += t[<span class="number">1</span>].val;</span><br><span class="line">    <span class="keyword">if</span> (t[<span class="number">0</span>].left === <span class="literal">null</span>) &#123;</span><br><span class="line">      t[<span class="number">0</span>].left = t[<span class="number">1</span>].left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      stack.push([t[<span class="number">0</span>].left, t[<span class="number">1</span>].left]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t[<span class="number">0</span>].right === <span class="literal">null</span>) &#123;</span><br><span class="line">      t[<span class="number">0</span>].right = t[<span class="number">1</span>].right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      stack.push([t[<span class="number">0</span>].right, t[<span class="number">1</span>].right]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> t1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分类大纲</title>
      <link href="/2020/07/14/%E5%88%86%E7%B1%BB%E5%A4%A7%E7%BA%B2/"/>
      <url>/2020/07/14/%E5%88%86%E7%B1%BB%E5%A4%A7%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="算法—分析大纲"><a href="#算法—分析大纲" class="headerlink" title="算法—分析大纲"></a>算法—分析大纲</h2><h1 id="分类大纲"><a href="#分类大纲" class="headerlink" title="分类大纲"></a>分类大纲</h1><ul><li>算法的复杂度分析</li><li>排序算法，以及他们的区别和优化</li><li>数组中的双指针、滑动窗口思想</li><li>利用 Map 和 Set 处理查找表问题</li><li>链表的各种问题</li><li>利用递归和迭代法解决二叉树问题</li><li>栈、队列、DFS、BFS</li><li>回溯法、贪心算法、动态规划</li></ul><p>#<a href="https://blog.csdn.net/linhuanmars/article/details/39366817" target="_blank" rel="noopener">图</a></p><p>先来看看最基础的Clone Graph，很简单就是要复制一个图，常见的两种搜索算法（深度和广度）都可以用，具体细节就不在这里解释了，不熟悉的朋友可以看看相关资料。建议大家还是两种都要练一练，因为在解决具体问题中这两种方法还是很常用的。</p><p>接下来的这些题都是基于图算法的应用，Word Ladder和Word Ladder II是比较典型的，看起来好像是字符串操作的题目，实际上这里得转换成图的角度来考虑，因为字符集比较小的缘故（26个小写字母），也就是说对于一个单词来说，改变其中一个字符可以有25条边（除去他自己），所以总共有（25*单词的长度L）条边。找到是否有满足一个单词转成另一个单词就是在这个图中找到一条路径。所以我们可以把问题转换成图用广度优先搜索来解决，找到即可停止。</p><p>Word Ladder是广度优先搜索的应用，而Longest Consecutive Sequence则是深度优先搜索的应用。题目要求是找出最长的连续整数串，如果把数字看成结点，与它相邻的整数连有边，那么找到最长的连续串就是在这个图中找最长路径。因为是最长路径，这里用深度优先搜索是比较适合的。</p><p>Word Search也是一道深度优先搜索的题目，是把上下左右相邻的结点看成有边联结，然后进行深度搜索就可以了，小细节是这里从每个点出发字符就可以重用，所以要重置一下访问结点。</p><p>Surrounded Regions要用一个图形学中很常用的填充算法：Flood fill 算法，其实本质还是一个深度优先搜索，跟Word Search一样是把相邻的上下左右看成连边，然后进行搜索填充。</p><p>#资源<br><a href="https://juejin.im/post/5f0b2313e51d45349b5ca747" target="_blank" rel="noopener">前端刷题</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>100道有答案的前端面试题</title>
      <link href="/2020/07/12/100%E9%81%93%E6%9C%89%E7%AD%94%E6%A1%88%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/07/12/100%E9%81%93%E6%9C%89%E7%AD%94%E6%A1%88%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>100道有答案的前端面试</p><hr><p>来源：<a href="https://juejin.im/post/5f081d496fb9a07eb90cb5cf" target="_blank" rel="noopener">100道有答案的前端面试题</a></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>#其他资源<br><a href="https://github.com/lgwebdream/FE-Interview" target="_blank" rel="noopener">前端面试星球</a><br><a href="https://github.com/sl1673495/leetcode-javascript" target="_blank" rel="noopener">Welcome to leetcode-javascript</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试-Firebug</title>
      <link href="/2020/07/12/%E6%B5%8B%E8%AF%95-Firebug/"/>
      <url>/2020/07/12/%E6%B5%8B%E8%AF%95-Firebug/</url>
      
        <content type="html"><![CDATA[<h2 id="测试-Firebug"><a href="#测试-Firebug" class="headerlink" title="测试-Firebug"></a>测试-Firebug</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试面试</title>
      <link href="/2020/07/11/%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/07/11/%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="测试面试"><a href="#测试面试" class="headerlink" title="测试面试"></a>测试面试</h2><p>#测试面试题</p><p><a href="https://www.guru99.com/qa-interview-questions-answers.html" target="_blank" rel="noopener">这里</a></p><ol><li><p>QA和软件测试区别？</p><ul><li>QA：监视用于生产软件的过程的质量，确保最终产品的功能（function）满足用户要求的过程。</li></ul></li><li><p>什么是Testware？</p><ul><li>测试工件：测试用例，测试数据，设计和执行测试需要的测试计划</li></ul></li><li><p>构建和发布之间区别？</p><ul><li>内部版本：开发团队提供给测试团队的可安装软件编号</li><li>发行版：这是安装程序软件的编号，由测试人员或者开发人员提交给客户</li></ul></li><li><p>SQA再测试时候面临自动化挑战？</p><ul><li>掌握自动化工具</li><li>自动化脚本的可重用性</li><li>自动化复杂的测试用例</li></ul></li><li><p>什么是漏洞泄漏和漏洞释放？</p><ul><li>数据驱动测试是一种自动化测试框架，他可以测试AUT上不同输入值。<ul><li>直接从数据文件中读取（csv, excel, 数据池）</li></ul></li></ul></li><li><p>发现错误的步骤？</p><ul><li>Open 给PM/DEV</li><li>如果是有效缺陷（Dev确认），Dev需要fix； 否则拒绝</li><li>下一步将检查它是否在范围内部。如果该错误不是当前版本的一部分，则缺陷被推迟。</li><li>Dulplicate</li><li>Fix后， in progress</li><li>修复后pass，关闭状态</li></ul></li><li><p>测试策略是什么？</p><ul><li>简介</li><li>资源</li><li>测试活动的范围和时间表</li><li>测试工具</li><li>测试优先级</li><li>测试计划</li><li>必须执行的测试类型</li></ul></li><li><p>不同类型的软件测试？</p><ul><li>单元测试</li><li>集成测试 和 回归测试</li><li>震动测试</li><li>烟雾测试</li><li>功能测试</li><li>性能测试</li><li>白盒/黑盒测试</li><li>Alpha/Beta测试<ul><li>Pre-apha：功能不完整的版本    </li><li>Alpha：受开发方控制的，用户的数量相对比较少</li><li>beta：测试的环境是不受开发方控制的（真实用户）</li><li>Released candidate （最终测试版本）/Golden Master：两个版本 最后应用RC2</li><li>RTM（Release To Manufacturing）之简称，意思是：发放给生产商</li><li>至最后的Gold（完成版）：</li><li>Stable：稳定版本来自预览版本释出使用与改善而修正完成</li></ul></li><li>负载测试/压力测试</li><li>系统测试</li></ul></li><li><p>什么是分支测试，什么是边界测试？</p><ul><li>对代码的所有分支的测试（一次测试）称为分支测试。在测试过程中，专注于软件的极限条件的测试称为边界测试。</li></ul></li><li><p>测试计划和测试用例的内容是什么？</p><ul><li>测试目标 objectives</li><li>测试范围 scope</li><li>测试框架 frame</li><li>环境 environment</li><li>测试原因 </li><li>the criteria for entrance and exit</li><li>可交付成果 deliverable</li><li>风险因素 risk factors</li></ul></li><li><p>什么是Agile Test？重要性？</p><ul><li>编码和测试同时进行。它需要持续的客户互动</li></ul></li><li><p>什么是测试用例？</p><ul><li>被测试应用程序特定条件。<ul><li>具有测试步骤</li><li>先决条件</li><li>测试环境 </li><li>输出信息</li></ul></li></ul></li><li><p>自动化测试计划的策略是什么？</p><ul><li>自动化测试计划的策略</li><li>编织自动化测试计划</li><li>记录场景</li><li>错误处理程序合并</li><li>通过插入<strong>检查点</strong>和<strong>循环结果</strong>来增强脚本</li><li>调试脚本并解决问题</li><li>重新运行脚本</li><li>报告结果</li></ul></li><li><p>什么是质量审核？</p><ul><li>确定质量控制程序有效</li><li>独立检查</li></ul></li><li><p>测试人员在测试时使用什么工具？</p><ul><li>Selenium</li><li>Firebug</li><li>OpenSTA</li><li>WinSCP</li><li>YSlow for FireBug</li><li>Web Developer toolbar for firebox</li><li>Charles<ul><li>支持SSL代理。可以截取分析SSL的请求。、</li><li>支持流量控制。可以模拟慢速网络以及等待时间（latency）较长的请求。</li><li>支持AJAX调试。可以自动将json或xml数据格式化，方便查看。</li><li>支持AMF调试。可以将Flash Remoting 或 Flex Remoting信息格式化，方便查看。</li><li>支持重发网络请求，方便后端调试。</li><li>支持修改网络请求参数。</li><li>支持网络请求的截获并动态修改。</li><li>检查HTML，CSS和RSS内容是否符合W3C标准。</li></ul></li></ul></li><li><p>解释压力测试，负载压力和容量测试？</p></li><li><p>解决软件开发问题的五个常见解决方案是什么？</p></li><li><p>什么是“用例”案，包括什么？</p></li><li><p>什么是CRUD测试以及如何测试CRUD？</p></li><li><p>什么是线程测试？</p></li><li><p>什么是配置管理？</p></li></ol><h1 id="API测试"><a href="#API测试" class="headerlink" title="API测试"></a>API测试</h1><ol><li>什么是API<ul><li>应用程序编写接口</li></ul></li><li>API测试是什么<ul><li>软件测试 - 涉及直接测试API</li><li>集成测试 -  功能，可靠性，性能和安全性</li><li>关注软件架构的业务逻辑层</li></ul></li><li>API测试类型<ul><li>单元测试、功能测试、负载测试、安全测试、UI测试、模糊测试等等</li></ul></li><li>列举API测试中使用的一些常用协议<ul><li>HTTP、thrift、rest、jms、soap等等</li></ul></li><li>API与web服务之间的区别<ul><li><strong>web服务</strong>：所有的web服务都是api；</li><li>所有web服务都需要通过web（http）公开；</li><li>web服务只有三种使用方式：soap、rest和sml-rpc进行通信<ul><li>简单对象访问协议。是一种基于XML的消息传递协议</li><li>Representational State Transfer。它是一组帮助开发人员执行请求和接收响应的函数。通过REST API中的HTTP协议进行交互</li><li>post用于在服务器上创建新对象，put请求用于在替换对象。</li></ul></li></ul></li><li>.PUT和POST方法区别 <ul><li>post用于在服务器上创建新对象，put请求用于在替换对象。</li></ul></li><li>执行API测试时我们面临的BUG类型是什么<ul><li>压力，性能和安全问题 功能重复 或 缺失可靠性问题</li><li>消息不当不兼容的错误</li><li>处理机制多线程问题不合适的错误</li></ul></li><li>API测试面临的主要挑战是什么<ul><li>适当的参数及其组合正确分类参数顺序验证输出</li></ul></li><li>API测试与单元测试之间的区别<ul><li>单元测试：白盒测试 - 构建中的过程之前 - 涉及源代码 - 测试范围有限，只考虑基本功能</li><li>API测试：多由QA团队进行多为黑盒测试，在构建部署后进行大多不涉及源代码API测试测试范围很广</li></ul></li><li>常用的API文档模板<ul><li>一些API文档模板如下。</li><li>SwaggerFlatDocRestDocAPI blueprintSlateMiredotWeb服务API规范</li></ul></li><li>API测试中需要验证哪些内容<ul><li>数据准确性HTTP或其他协议状态代码响应时间</li><li>API返回任何错误时的错误代码授权</li><li>检查非功能测试，如性能测试，安全测试</li></ul></li><li>API常见测试有哪些<ul><li></li></ul></li><li>get请求与post请求区别</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安全—javascript-防止依赖注入</title>
      <link href="/2020/07/11/%E5%AE%89%E5%85%A8%E2%80%94javascript-%E9%98%B2%E6%AD%A2%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>/2020/07/11/%E5%AE%89%E5%85%A8%E2%80%94javascript-%E9%98%B2%E6%AD%A2%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="安全—javascript-防止sql注入"><a href="#安全—javascript-防止sql注入" class="headerlink" title="安全—javascript-防止sql注入"></a>安全—javascript-防止sql注入</h2><p>SQL注入攻击的总体思路</p><ul><li>寻找到SQL注入的位置</li><li>判断服务器类型和后台数据库类型</li><li>针对不通的服务器和数据库特点进行SQL注入攻击</li></ul><p>#各种语言如何防止</p><ol><li><p>javascript</p><ol><li><p>URL 地址防止注入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过滤URL非法SQL字符</span></span><br><span class="line"><span class="keyword">var</span> sUrl=location.search.toLowerCase();</span><br><span class="line"><span class="keyword">var</span> sQuery=sUrl.substring(sUrl.indexOf(<span class="string">"="</span>)+<span class="number">1</span>);</span><br><span class="line">re=<span class="regexp">/select|update|delete|truncate|join|union|exec|insert|drop|count|'|"|;|&gt;|&lt;|%/i</span>;</span><br><span class="line"><span class="keyword">if</span>(re.test(sQuery))</span><br><span class="line">&#123;</span><br><span class="line">alert(<span class="string">"请勿输入非法字符"</span>);</span><br><span class="line">location.href=sUrl.replace(sQuery,<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入文本框防注入 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AntiSqlValid</span>(<span class="params">oField </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">re= <span class="regexp">/select|update|delete|exec|count|'|"|=|;|&gt;|&lt;|%/i</span>;</span><br><span class="line"><span class="keyword">if</span> ( re.test(oField.value) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//alert("请您不要在参数中输入特殊字符和SQL关键字！"); //注意中文乱码</span></span><br><span class="line">oField.value = <span class="string">";</span></span><br><span class="line"><span class="string">oField.className="</span>errInfo<span class="string">";</span></span><br><span class="line"><span class="string">oField.focus();</span></span><br><span class="line"><span class="string">return false;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//在需要防注入的输入文本框添加如下方法</span></span><br><span class="line"><span class="string">txtName.Attributes.Add("</span>onblur<span class="string">", "</span>AntiSqlValid(<span class="keyword">this</span>)<span class="string">");//防止Sql脚本注入</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>node</p><ol><li>node-mysql  </li></ol></li><li><p>Php</p><ol><li>Prepared Statements  <ul><li>采用预编译语句集，它内置了处理SQL注入的能力，只要使用它的setXXX方法传值即可。 </li></ul></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript面试</title>
      <link href="/2020/07/10/JavaScript%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/07/10/JavaScript%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript面试"><a href="#JavaScript面试" class="headerlink" title="JavaScript面试"></a>JavaScript面试</h2><p>#资源</p><ul><li><a href="https://juejin.im/post/5c36fe50518825253b5e94f4" target="_blank" rel="noopener">JavaScript设计模式总结</a></li><li><a href="https://juejin.im/entry/58c280b1da2f600d8725b887" target="_blank" rel="noopener">https://juejin.im/entry/58c280b1da2f600d8725b887</a></li><li><a href="https://zhuanlan.zhihu.com/p/51921749" target="_blank" rel="noopener">js设计模式：第一篇</a></li><li><a href="https://zhuanlan.zhihu.com/p/65398124" target="_blank" rel="noopener">[译] 现代 JavaScript 开发中的设计模式</a></li><li><a href="https://juejin.im/post/5c36fe50518825253b5e94f4" target="_blank" rel="noopener">一位前端 2018 绝地求生记 | 掘金年度征文</a></li><li><a href="https://juejin.im/post/5e7af0685188255dcf4a497e" target="_blank" rel="noopener">写给女朋友的中级前端面试秘籍（含详细答案，15k级别）</a></li></ul><p>#React</p><ul><li><a href="https://liangjunrong.github.io/JavaScript-library/React/React-demo-four-JueJin.html" target="_blank" rel="noopener">React Demo Four - 掘金</a></li></ul><p>#Angular</p><ul><li><a href="https://juejin.im/post/5b10aeca6fb9a01e54375566" target="_blank" rel="noopener">浅谈 Angular 项目实战</a></li></ul><h1 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h1><ul><li><a href="https://www.jianshu.com/p/0805128b4e27" target="_blank" rel="noopener">F7+Vue+WebPack移动端单页应用脚手架</a></li></ul><p>#CORDOVA</p><ul><li><a href="https://cordova.axuer.com/docs/zh-cn/latest/cordova/events/events.html#volumeupbutton按下增加声音按钮" target="_blank" rel="noopener">cordova</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java面试</title>
      <link href="/2020/07/10/java%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/07/10/java%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="java面试"><a href="#java面试" class="headerlink" title="java面试"></a>java面试</h2><ul><li>Java 基础</li><li>容器</li><li>多线程</li><li>反射</li><li>对象拷贝</li><li>java Web 模块</li><li>异常</li><li>网络</li><li>设计模式</li><li>Spring/Spring MVC</li><li>Spring Boot/Spring Cloud</li><li>Hibernate</li><li>Mybatis</li><li>RabbitMQ</li><li>Kafka</li><li>Zookeeper</li><li>MySql</li><li>Redis</li><li>JVM </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目介绍</title>
      <link href="/2020/07/10/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/07/10/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>##项目点</p><ul><li><p>为什么用这个</p></li><li><p>替代方案</p></li><li><p>如何埋点</p><ul><li><a href="https://tech.meituan.com/2019/08/15/mtflexbox-automation-buried-point-exploration.html" target="_blank" rel="noopener">MTFlexbox自动化埋点探索</a></li><li><a href="https://www.cnblogs.com/30go/p/10421507.html" target="_blank" rel="noopener">前端埋点的那些事</a></li><li><a href="https://testerhome.com/topics/21321" target="_blank" rel="noopener">埋点自动化测试 Pro</a></li><li><a href="https://segmentfault.com/a/1190000014922668" target="_blank" rel="noopener">web 埋点实现原理了解一下</a></li><li><a href="https://juejin.im/entry/5d5c00f55188255d3d2997e1" target="_blank" rel="noopener">有赞埋点实践</a></li><li><a href="https://www.jianshu.com/p/30f44482ae3b" target="_blank" rel="noopener">FaceBook埋点测试</a></li></ul></li><li><p>QBS</p></li><li><p>流量缺失了怎么办</p></li><li><p>并发</p></li><li><p>代码质量（安全）sql注入</p></li><li><p>（安全）压力测试 &amp; 测试指标</p></li><li><p>服务端QPS &amp; 页面呈现fps</p></li><li><p>读写锁/信号量/管道-&gt;并发 /哲学家餐桌 死锁 互斥量 <a href="https://juejin.im/post/5dde2b816fb9a0719b30726c" target="_blank" rel="noopener">Redis 的分布式锁实现</a></p><ul><li><p>信号量<a href="https://www.jianshu.com/p/c1015f5ffa74" target="_blank" rel="noopener">进程间通信IPC (InterProcess Communication)</a>  </p></li><li><p><a href="https://juejin.im/post/5dde2b816fb9a0719b30726c" target="_blank" rel="noopener">Node.js 中实践基于 Redis 的分布式锁实现</a></p></li><li><p>安全性：<strong>上了锁。</strong>所谓一个萝卜一个坑，第一点要做的是上锁，在任意时刻要保证仅有一个客户端持有该锁。</p><ul><li>上锁 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setnx key value  </span><br><span class="line"> expire key seconds</span><br></pre></td></tr></table></figure><ul><li>value：建议设置为一个随机值，在释放锁的时候会进一步讲解</li><li>EX seconds：设置的过期时间</li><li>PX milliseconds：也是设置过期时间，单位不一样</li><li>NX|XX：NX 同 setnx 效果是一样的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set key value [EX seconds] [PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>释放锁</p><ul><li><p>加锁的过程中建议把 value 设置为一个随机值，主要是为了更安全的释放锁，在 del key 之前先判断这个 key 存在且 value 等于自己指定的值才执行删除操作。</p></li><li><p>代码</p><pre><code>if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then    return redis.call(&quot;del&quot;,KEYS[1])else    return 0end</code></pre></li></ul></li><li><p>死锁：<strong>锁都没打开。</strong>造成死锁可能是由于某种原因，本该释放的锁没有被释放，因此在上锁的时候可以同步的设置过期时间，如果由于客户端自己的原因没有被释放，也要保证锁能够自动释放。</p></li><li><p>容错：最<strong>多有多少不打开。</strong>容错是在多节点的模式下需要考虑的，只要能保证 N/2+1 节点可用，客户端就可以成功获取、释放锁。</p></li></ul></li><li><p>代码扫描   <a href="https://github.com/google/eng-practices" target="_blank" rel="noopener">Google</a></p><ul><li><p>Security Standards:  CWE, OWASP, CERT, PCI DSS, DISA STIG, and ISO/IEC TS 17961.<br>Security Vulnerability Detection: SQL Injection, Tainted Data, Buffer Overflow, Vulnerable Coding Practices, and many more.</p></li><li><p>Bug, Quality Issue, and Code Smell Detection: Null Pointer Dereferences/Exceptions, Memory/Resource Leaks, Uncaught Exceptions, and many more.</p></li></ul></li></ul><p>##语言</p><ul><li>Go 语言</li><li>JS 语言</li><li>Java 语言</li><li>Python 语言 </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>缓存</title>
      <link href="/2020/07/09/%E7%BC%93%E5%AD%98/"/>
      <url>/2020/07/09/%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>#1.性能优化角度<br><a href="https://github.com/amandakelake/blog/issues/43" target="_blank" rel="noopener">来自</a><br>##缓存分类</p><ul><li>cookie:<ul><li>好处：简明有效，少量不敏感数据</li><li>缺点：4K， 不安全（暴露session）</li></ul></li><li>Web Storage<ul><li>对比：<ul><li>好处：容量稍微大一点（5M），localStorage 可做持久化数据存储</li><li>机制：事件通知机制 - 数据发送给监听者</li><li>缺点： local data 被篡改； XSS攻击</li></ul></li><li>注意：<ul><li>读取到HTML 和 JS代码</li><li>文件的版本： 更新控制会带来更多的代码层面的<strong>维护成本</strong></li></ul></li><li>适合关键的业务数据 </li></ul></li><li>indexDB：<ul><li>结构化的、事务型的、高性能的NoSQL</li><li>同步/异步API</li></ul></li><li>PWA（Service Worker）：<ul><li>替代 Application Cache（Manifest）  </li><li>独立线程，后台运行</li><li>三个限制：<ul><li>不能访问DOM</li><li>同步API 不能用</li><li>需要HTTPS协议</li></ul></li></ul></li><li>缓存实践提示：<ul><li>配置超长时间的本地缓存 —— 节省带宽，提高性能</li><li>精确缓存控制：采用内容摘要作为缓存更新依据</li><li>优化网络请求：静态资源CDN部署</li><li>平滑升级：资源发布路径实现非覆盖发布</li></ul></li></ul><p>#2.浏览器存储机制：<br><a href="https://github.com/amandakelake/blog/issues/41" target="_blank" rel="noopener">这里</a></p><h2 id="强缓存，协商缓存"><a href="#强缓存，协商缓存" class="headerlink" title="强缓存，协商缓存"></a>强缓存，协商缓存</h2><ul><li>浏览器加载 <ul><li>-&gt; expires/cache-control <ul><li>-&gt; 命中强缓存（找到）</li><li>-&gt;  没有命中强缓存<ul><li>-&gt; last-modified和etag 命中协商缓存 </li><li>服务器会将这个请求返回</li></ul></li></ul></li><li>否则，从服务器加载资源</li></ul></li></ul><p>###强缓存<br>通过 Expire 和 Cache-Control 两种响应头实现</p><ul><li>Expire 是http1.0提出的一个表示资源过期的header<ul><li>它描述的是一个绝对时间，由服务器返回<code>Cache-Control: max-age=315360000</code></li><li>Cache-Control: <ul><li>no-cache 缓存到local缓冲区</li><li>no-store才是真正的不缓存数据到本地</li><li>可以被所有用户缓存（共享），终端和CDN等中间代理服务器 </li><li>private只能被终端浏览器缓存（而且是私有缓存）</li></ul></li></ul></li></ul><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><ul><li><p>协商缓存命中</p><ul><li>请求响应返回的http状态为304</li><li>显示一个Not Modified的字符串</li></ul></li><li><p>对Header进行管理</p><ul><li>Last-Modified, If-Modified-Since</li><li>ETag, If-None-Match</li></ul></li></ul><ol><li>Last-Modified， If-Modified-Since<ul><li>Last-Modified 表示本地最后修改日期。浏览器会在request hearder加上<code>Last-Modified</code>的值</li><li>如果本地打开缓存文件，会造成修改 -&gt; HTTP/1.1 出现了ETag</li></ul></li></ol><ol start="2"><li>ETag, If-None-Match：<br>ETag 就像是一个指纹 资源变化会导致ETag变化，跟最后修改时间没关系，（Unicode）<ul><li>If-None-Match的header会将上次返回的Etag发送给服务器，询问该资源的Etag是否有更新，有变动就会发送新的资源回来</li></ul></li></ol><p>###为什么用ETag：</p><ol><li>文件不改变，Last-Modified 在变动</li><li>文件修改非常频繁（1sN次）</li><li>服务器不能精确的到文件的最后修改时间</li></ol><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul><li>200: 强缓Expires/Cache-Control存失效时，返回新的资源文件</li><li>200(from cache): 强缓Expires/Cache-Control两者都存在，未过期，Cache-Control优先Expires时，浏览器从本地获取资源成功</li><li>304(Not Modified )：协商缓存Last-modified/Etag没有过期时，服务端返回状态码304</li></ul><p>##如何选择合适的缓存</p><p>大致的顺序</p><p>Cache-Control —— 请求服务器之前<br>Expires —— 请求服务器之前<br>If-None-Match (Etag) —— 请求服务器<br>If-Modified-Since (Last-Modified) —— 请求服务器</p><p>#3.数据存储：</p><h2 id="cookie、Storage-amp-indexedDB"><a href="#cookie、Storage-amp-indexedDB" class="headerlink" title="cookie、Storage&amp; indexedDB"></a>cookie、Storage&amp; indexedDB</h2><p>#4. 离线应用缓存：</p><h2 id="App-Cache-gt-Manifest"><a href="#App-Cache-gt-Manifest" class="headerlink" title="App Cache =&gt; Manifest"></a>App Cache =&gt; Manifest</h2><h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><h2 id="页面缓存优化"><a href="#页面缓存优化" class="headerlink" title="页面缓存优化"></a>页面缓存优化</h2><ul><li><a href="https://segmentfault.com/a/1190000020867090" target="_blank" rel="noopener">前端性能优化指南</a></li><li><a href="https://juejin.im/post/5e61a84f518825494822d21c#heading-2" target="_blank" rel="noopener">商城秒杀系统优化方案</a></li><li><a href="https://zhuanlan.zhihu.com/p/93163523" target="_blank" rel="noopener">浏览器缓存的这些知识</a></li><li><a href="https://www.cnblogs.com/cckui/p/11506514.html" target="_blank" rel="noopener">HTTP 强制缓存和协商缓存</a></li><li><a href="https://juejin.im/post/5b0bff30f265da08f76cc6f0" target="_blank" rel="noopener">前端性能优化–从 10 多秒到 1.05 秒</a></li><li><a href="https://juejin.im/post/5a966bd16fb9a0635172a50a" target="_blank" rel="noopener">2018 前端性能优化清单</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RTMP 延迟分析</title>
      <link href="/2020/07/09/RTMP%20%E5%BB%B6%E8%BF%9F%E5%88%86%E6%9E%90/"/>
      <url>/2020/07/09/RTMP%20%E5%BB%B6%E8%BF%9F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="延迟分析"><a href="#延迟分析" class="headerlink" title="延迟分析"></a>延迟分析</h2><p>#RTMP<br>RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。该协议基于TCP，是一个协议族，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。</p><p>RTMP是一种设计用来进行实时数据通信的网络协议，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信。支持该协议的软件包括Adobe Media Server/Ultrant Media Server/red5等。</p><ul><li>RTMP工作在TCP之上，默认使用端口1935；</li><li>RTMPE在RTMP的基础上增加了加密功能；</li><li>RTMPT封装在HTTP请求之上，可穿透防火墙；</li><li>RTMPS类似RTMPT，增加了TLS/SSL的安全功能。</li></ul><p><a href="https://www.jianshu.com/p/5ce11c20a9df" target="_blank" rel="noopener">来自</a></p><h1 id="RTMP-延迟分析"><a href="#RTMP-延迟分析" class="headerlink" title="RTMP 延迟分析"></a>RTMP 延迟分析</h1><p>RTMP和HLS基本上可以覆盖所有客户端观看</p><ul><li>HLS主要是延时比较大</li><li>RTMP主要优势在于延时低</li></ul><h1 id="应用场景（Verify）"><a href="#应用场景（Verify）" class="headerlink" title="应用场景（Verify）"></a>应用场景（Verify）</h1><p>低延时应用场景包括：</p><ul><li><p>互动式直播：譬如2013年大行其道的美女主播，游戏直播等等。</p><ul><li>各种主播，流媒体分发给用户观看。用户可以文字聊天和主播互动。</li></ul></li><li><p>视频会议：我们要是有同事出差在外地，就用视频会议开内部会议。</p><ul><li>其实会议1秒延时无所谓，因为人家讲完话后，其他人需要思考。</li><li>思考的延时也会在1秒左右。当然如果用视频会议吵架就不行。</li></ul></li><li><p>其他：监控，直播也有些地方需要对延迟有要求。</p><ul><li>互联网上RTMP协议的延迟基本上能够满足要求。<h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1></li></ul></li></ul><ol><li><a href="https://draveness.me/whys-the-design-live-streaming-latency/" target="_blank" rel="noopener">为什么流媒体直播的延迟很高</a></li><li><a href="https://blog.csdn.net/lcalqf/article/details/52993630" target="_blank" rel="noopener">RTMP 延迟分析</a></li><li><a href="https://zhuanlan.zhihu.com/p/73984438" target="_blank" rel="noopener">视频和视频帧：ffmpeg的RTMP推流</a></li><li><a href="https://www.jianshu.com/p/c04d810b7562" target="_blank" rel="noopener">视频传输协议详解（RTMP、RTSP、HLS）</a></li><li><a href="https://www.jianshu.com/p/5ce11c20a9df" target="_blank" rel="noopener">RTMP协议解析（一） —— 基本了解</a></li><li><a href="https://zhuanlan.zhihu.com/p/27368329" target="_blank" rel="noopener">流媒体系统的RTMP协议</a></li><li><a href="https://blog.csdn.net/dong_beijing/article/details/60776248" target="_blank" rel="noopener">通过信号量和共享内存实现h264码流在不同进程间传输</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试-google-测试</title>
      <link href="/2020/07/09/%E6%B5%8B%E8%AF%95-google-%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/07/09/%E6%B5%8B%E8%AF%95-google-%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Google测试"><a href="#Google测试" class="headerlink" title="Google测试"></a>Google测试</h1><p>##软件测试开发工程师</p><ul><li>职责：负责可测试性和测试自动化体系的长期有效性。<ul><li>扮演<strong>质量顾问</strong>的角色</li><li>在<strong>单元测试</strong>方面给予开发人员支持</li><li>为开发人员提供<strong>测试框架</strong>，方便开发提高<em><strong><em>测试效率</em></strong></em></li><li>参与设计评审、重构代码增加可测试性，编写<strong>单元测试框架</strong>和<strong>自动化测试框架</strong></li><li>更加关注于质量提升和<strong>测试覆盖率(code coverage)</strong>的增加，SET写代码的目的是可以让SWE测试自己的功能</li></ul></li></ul><p>##测试工程师</p><ul><li>职责：评估对用户的影响以及软件产品整体目标上的风险<ul><li>从用户的角度来思考质量方面各种问题</li><li>从开发角度来看，他们编写用户使用场景方面的自动化用例代码</li><li>从产品角度来看，他们评估整体测试覆盖度，并验证其他工程师角色在测试方面合作的有效性</li><li>产品专家、质量顾问和风险分析师</li></ul></li><li></li></ul><h1 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h1><h2 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h2><ul><li><a href="https://www.jianshu.com/p/77f4f9175028" target="_blank" rel="noopener">postman最详细的中文使用教程</a></li></ul><h2 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h2><ul><li><a href="https://testerhome.com/topics/17068" target="_blank" rel="noopener">wrk,ab,locust,Jmeter 压测结果比较</a></li><li><a href="https://zhuanlan.zhihu.com/p/71594831" target="_blank" rel="noopener">记一次使用NodeJS做服务器压力测试</a></li><li><a href="https://juejin.im/post/5b827cbbe51d4538c021f2da" target="_blank" rel="noopener">对node工程进行压力测试与性能分析</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Angular &amp; React &amp; Vue 对比</title>
      <link href="/2020/07/09/Angular%20&amp;%20React%20&amp;%20Vue%20%E5%AF%B9%E6%AF%94/"/>
      <url>/2020/07/09/Angular%20&amp;%20React%20&amp;%20Vue%20%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Angular-amp-React-amp-Vue-对比"><a href="#Angular-amp-React-amp-Vue-对比" class="headerlink" title="Angular &amp; React &amp; Vue 对比"></a>Angular &amp; React &amp; Vue 对比</h2><p>#相同点：</p><ol><li>单页应用程序</li><li>组建管理 Component</li><li>数据流动</li><li>后段API如何进行 路径如何处理</li><li>css/js/</li><li>webpeck</li></ol><p>#不同点:</p><ol><li>React - 面向网页显示<br> jsx - 组建都涵盖在这一个文件中（html / css/ js）<br> 整体设计变化不大<br> 容易潜入网页</li><li>Angular - 面向整体应用开发（应用开发）<ul><li>精简架构设计 提供TS （AngularJs以后）</li><li>html/cs/js 分开</li></ul></li><li>Vue 界面显示（类似React 但不用选择第三方插件 也没有太多选择）<ul><li>本身组建分开 简单</li><li>一直在追赶Angular</li><li>没有大公司的支持</li></ul></li></ol><p>##React &amp; Vue：不断增加第三方插件</p><hr><p>#Angular</p><ol><li>多Component 后可以lazy mounting </li><li>嵌入多个moudule</li><li>Single Page Component（React类似） App Component - index.html<br> 3.1 Rounting: (单页应用开发之前 rount 是在后端，计算出html数据推送到前端。 ) <pre><code>* 单页应用，后段只管理数据* Angular framework 里面（多个lib，api请求的lib，rounting moudule） 所以称之为架构** Vue &amp; React：lib 放在min-js 通过require加载</code></pre></li><li>Angular的标准化 让代码可以90%重用</li><li>TypeScript 微软主推（编程效率）</li><li>模版 代码 css可分<ul><li>React：JSX 混合</li><li>大型项目重要性</li></ul></li><li>API访问<ul><li>直接集成HTML dispution</li><li>开发环境需要share proxy，命令行配置</li><li>React 有一个proxy属性，设置自己API</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React-Redux-store</title>
      <link href="/2020/07/08/React-Redux-store/"/>
      <url>/2020/07/08/React-Redux-store/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="React系列"><a href="#React系列" class="headerlink" title="React系列"></a>React系列</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Angular历史</title>
      <link href="/2020/07/08/Angular%E5%8E%86%E5%8F%B2/"/>
      <url>/2020/07/08/Angular%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-Angular-历史"><a href="#title-Angular-历史" class="headerlink" title="title:Angular 历史"></a>title:Angular 历史</h2><p>From : <a href="https://medium.com/@lifenshades/difference-among-angular-8-7-6-5-4-3-2-breakdown-new-features-and-changes-811fb5f8e6f0" target="_blank" rel="noopener">点我</a><br>#Angular 2(typescript)</p><ol><li>Component-based instead of Controller</li><li>ES6</li><li>Mobile (low-end) device</li></ol><p>#Angular 3</p><ol><li>single repo for everthiing @angular/core @angular/compiler @angular/router</li><li>router realsing (MonoRepo)</li></ol><p>#Angular 4</p><ol><li>underlying concecpt (same or inheritance from 2)</li><li>reduce size of AOT compiler</li><li>Typescript 2.1</li><li>seperate @angular/core to @angular/animation</li><li>block in *ngIF introduced:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*ngIf&#x3D;”yourCondition; else myFalsyTemplate”s</span><br><span class="line">“&lt;ng-template #myFalsyTemplate&gt;Else Html&lt;&#x2F;ng-template&gt;”</span><br></pre></td></tr></table></figure><p>#Angular 5</p><ol><li>HttpClient : a new modulr</li><li>exportAs: multiply names suport for both directives and component</li><li>new Router Life-cycle Events:<ul><li>ActivationStart, ActivationEnd,</li><li>ChildActivationStart, ChildActivationEnd,</li><li>GuardsCheckStart, GuardsCheckEnd, </li><li>ResolveStart and ResolveEnd.</li></ul></li></ol><p>#Angular 6</p><ol><li>More tool-chain and less underlying framework</li><li>RxJs 6</li><li>Synchronizes major version : <ul><li>Angular framework</li><li>Angular CLI</li><li>Angular Material + CDK</li><li><code>&lt;ng-template&gt;</code> instead of <code>&lt;template&gt;</code></li><li>Injectable</li><li>From   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; app.module.ts</span><br><span class="line">import &#123;MyService&#125; from &#39;.&#x2F;my-service&#39;;</span><br><span class="line">providers: [...MyService]</span><br></pre></td></tr></table></figure> to  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyService.ts</span></span><br><span class="line">@Injectable(&#123; <span class="attr">providedIn</span>: <span class="string">'root'</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>#Angular 7</li></ol><p>#Angular 8    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟DOM</title>
      <link href="/2020/07/08/%E8%99%9A%E6%8B%9FDOM/"/>
      <url>/2020/07/08/%E8%99%9A%E6%8B%9FDOM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS-DOM-虚拟DOM</title>
      <link href="/2020/07/08/JS-DOM-%E8%99%9A%E6%8B%9FDOM/"/>
      <url>/2020/07/08/JS-DOM-%E8%99%9A%E6%8B%9FDOM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue-杂七杂八</title>
      <link href="/2020/07/08/Vue-%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
      <url>/2020/07/08/Vue-%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</url>
      
        <content type="html"><![CDATA[<p>#问题：</p><ol><li><p>Keep-alive （场景 视频VLog） <a href="https://juejin.im/post/5d92acae6fb9a04e143daa0c" target="_blank" rel="noopener">  文章</a></p><ol><li>作用：缓存 - 降级荣塞</li><li>How： 以队列方式缓存</li><li>缓存的是什么：VNode (虚拟DOM)</li><li>坑：内存泄漏   解决方法：缓存数量限制<ol start="5"><li>使用了什么机制： LRU</li></ol><ul><li>显示隐藏</li><li>设置缓存大小 </li><li>自己写<pre><code>（Keep-alive 缓存的是结果，也就是vnode，如果太大就缓存数据）</code></pre><ul><li>有卡顿<ul><li></li></ul></li></ul></li></ul></li></ol><p>Vue 基于数据驱动  -&gt; 缓存数据<br>#第一 </p><ol><li><p>Vue runtime + complier</p><ul><li><p>运行时生命周期 编译时</p><ul><li><p>template -&gt;</p></li><li><p>(上线前变异)ast-&gt;</p><ul><li><p>(本地Complier，将<em>.vue打包成js，上线的时候只是JS 上传到服务器)render -&gt;</em></p><ul><li><p>【运行时】<strong>vnode （内存中存在的状态）在内存中diff</strong>-&gt;</p><blockquote><pre><code>DOM PULL 在React，主动发出的动作（react setSate props）后数据发生改变 DOM PUSH 在Vue，通过响应数据生成DOM                    </code></pre><p><code>&lt;div&gt;&lt;/div&gt;.   一个组建-&gt; 一个watcher[内存]-&gt; DOM</code><br>组建内部用Diff修改<br>为什么有Vnode/虚拟DOM： （缓存：类似 寄存器/内存/硬盘） 虚拟DOM - 缓冲地带 - 不同端运行</p></blockquote><p>在线编译：浏览器JS运行时候调用template，然后解析<br>RuntimeOnly：如果要在Template里面加入<strong>Component后性能非常差，必须要加入Complier包</strong>，优化成render函数然后删除这个包（资源优化）。                </p><ul><li>（通过patch（）{ doucument.getElementBy(‘’).apendchild()}）<strong>修改正式DOM的动作，通过虚拟DOM树递归【慢】， react中做了fiber，做时间分片</strong> <a href="https://juejin.im/post/5dadc6045188255a270a0f85" target="_blank" rel="noopener">React Fiber(时间分片)</a><ul><li>-&gt; 转换成DOM</li></ul></li></ul></li></ul></li></ul></li><li><p>script(浏览器从服务器拉下js开始运行) –&gt; </p></li><li><p>new Vue()  -&gt; (把数据处理成)响应data <strong>（生成vnode）</strong></p></li><li><p>style</p></li></ul></li></ul></li><li><p>Vue 浏览器端一贞解析机制</p></li><li><p>Vue 首屏优化</p><ul><li>优化<ul><li>如何优化加载速度，白屏如何引起的<ul><li>运行环境：</li><li>浏览器如何渲染：js/css/html </li><li>来源 - <a href="https://aerotwist.com/blog/the-anatomy-of-a-frame/" target="_blank" rel="noopener">浏览器一帧渲染</a>：       </li></ul></li></ul></li></ul></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/07/hello-world/"/>
      <url>/2020/07/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
